generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider            = "prisma-dbml-generator"
  projectName         = "Gistalk"
  projectDatabaseType = "PostgreSQL"
  projectNote         = "Gistalk Database"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Semester {
  SPRING
  SUMMER
  FALL
  WINTER
  ALL
}

enum Recommendation {
  YES
  NO
  MAYBE
}

model User {
  uuid      String   @id @db.Uuid
  name      String
  consent   Boolean
  createdAt DateTime @default(now()) @map("created_at")

  Record     Record[]
  RecordLike RecordLike[]
  BookMark   BookMark[]

  @@map("user")
}

model Professor {
  id   Int    @id @default(autoincrement())
  name String

  LectureSectionProfessor LectureSectionProfessor[]

  @@map("professor")
}

model LectureSectionProfessor {
  sectionId      Int            @map("section_id")
  lectureId      Int            @map("lecture_id")
  professorId    Int            @map("professor_id")
  year           Int
  semester       Semester
  LectureSection LectureSection @relation(fields: [sectionId, lectureId, year, semester], references: [id, lectureId, year, semester])
  Professor      Professor      @relation(fields: [professorId], references: [id])

  @@id([sectionId, lectureId, professorId, year, semester])
  @@map("lecture_section_professor")
}

model LectureCode {
  code      String @id
  lectureId Int    @map("lecture_id")

  Lecture Lecture @relation(fields: [lectureId], references: [id])

  @@map("lecture_code")
}

model Lecture {
  id   Int    @id @default(autoincrement()) @map("id")
  name String

  LectureCode    LectureCode[]
  LectureSection LectureSection[]

  @@map("lecture")
}

model LectureSection {
  id        Int
  lectureId Int      @map("lecture_id")
  year      Int
  semester  Semester

  capacity          Int
  registrationCount Int? @map("registration_count")
  fullCapacityTime  Int? @map("full_capacity_time")

  Lecture                 Lecture                   @relation(fields: [lectureId], references: [id])
  LectureSectionProfessor LectureSectionProfessor[]
  Record                  Record[]
  BookMark                BookMark[]

  @@id(name: "lectureSectionId", [id, lectureId, year, semester])
  @@map("lecture_section")
}

model BookMark {
  lectureId Int      @map("lecture_id")
  sectionId Int      @map("section_id")
  userUuid  String   @map("user_uuid") @db.Uuid
  year      Int
  semester  Semester

  LectureSection LectureSection @relation(fields: [lectureId, sectionId, year, semester], references: [lectureId, id, year, semester])
  User           User           @relation(fields: [userUuid], references: [uuid])

  @@id([lectureId, sectionId, userUuid])
  @@map("bookmark")
}

model Record {
  id Int @id @default(autoincrement())

  difficulty  Int
  skill       Int
  helpfulness Int
  interest    Int
  load        Int
  generosity  Int

  review String

  recommendation Recommendation
  semester       Semester
  year           Int

  createdAt DateTime @default(now()) @map("created_at")

  lectureId Int    @map("lecture_id")
  sectionId Int    @map("section_id")
  userUuid  String @map("user_uuid") @db.Uuid

  User           User           @relation(fields: [userUuid], references: [uuid])
  LectureSection LectureSection @relation(fields: [lectureId, sectionId, year, semester], references: [lectureId, id, year, semester])

  RecordLike RecordLike[]

  @@map("record")
}

model RecordLike {
  id Int @id @default(autoincrement())

  createdAt DateTime  @default(now()) @map("created_at")
  deletedAt DateTime? @map("deleted_at")

  userUuid String @map("user_uuid") @db.Uuid
  user     User   @relation(fields: [userUuid], references: [uuid])
  recordId Int    @map("record_id")
  record   Record @relation(fields: [recordId], references: [id])

  @@map("record_like")
}
