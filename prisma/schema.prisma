// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Semester {
  SPRING
  SUMMER
  FALL
  WINTER
  ALL
}

enum Recommendation {
  YES
  NO
  MAYBE
}

model User {
  uuid          String   @id @db.Uuid
  studentNumber Int      @map("student_number")
  name          String
  consent       Boolean
  createdAt     DateTime @default(now()) @map("created_at")

  Record         Record[]
  TakingLectures TakingLectures[]

  @@map("user")
}

model TakingLectures {
  userUuid  String  @map("user_uuid")
  user      User    @relation(fields: [userUuid], references: [uuid])
  lecture   Lecture @relation(fields: [lectureId], references: [id])
  lectureId Int     @map("lecture_id")

  @@id([userUuid, lectureId])
}

model Professor {
  id               Int                @id @default(autoincrement()) @map("id")
  name             String
  LectureProfessor LectureProfessor[]

  record Record[]

  @@map("professor")
}

model LectureCode {
  code String @id

  Lecture   Lecture @relation(fields: [lectureId], references: [id])
  lectureId Int     @map("lecture_id")

  @@map("lecture_code")
}

model Lecture {
  id Int @id @default(autoincrement()) @map("id")

  name String

  record           Record[]
  LectureCode      LectureCode[]
  TakingLectures   TakingLectures[]
  LectureProfessor LectureProfessor?

  @@map("lecture")
}

model LectureProfessor {
  lectureId   Int       @unique @map("lecture_id")
  lecture     Lecture   @relation(fields: [lectureId], references: [id])
  professorId Int       @map("professor_id")
  professor   Professor @relation(fields: [professorId], references: [id])

  @@id([lectureId, professorId])
  @@map("lecture_professor")
}

model Record {
  id Int @id @default(autoincrement())

  difficulty  Int
  skill       Int
  helpfulness Int
  interest    Int
  load        Int
  generosity  Int

  review String

  recommendation Recommendation
  semester       Semester
  year           Int

  createdAt DateTime @default(now()) @map("created_at")

  userUuid    String    @map("user_uuid") @db.Uuid
  user        User      @relation(fields: [userUuid], references: [uuid])
  lectureId   Int       @map("lecture_id")
  lecture     Lecture   @relation(fields: [lectureId], references: [id])
  professorId Int       @map("professor_id")
  professor   Professor @relation(fields: [professorId], references: [id])

  @@map("record")
}
