// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Semester {
  SPRING
  SUMMER
  FALL
  WINTER
  ALL
}

enum Recommendation {
  YES
  NO
  MAYBE
}

model User {
  uuid      String   @id @db.Uuid
  name      String
  consent   Boolean
  createdAt DateTime @default(now()) @map("created_at")

  Record Record[]
  RecordLike RecordLike[]

  @@map("user")
}

model Professor {
  id Int @id @default(autoincrement())

  name             String
  LectureProfessor LectureProfessor[]

  @@map("professor")
}

model LectureCode {
  code String @id

  Lecture   Lecture @relation(fields: [lectureId], references: [id])
  lectureId Int     @map("lecture_id")

  @@map("lecture_code")
}

model Lecture {
  id Int @id @default(autoincrement())

  name String @map("name")

  LectureCode      LectureCode[]
  LectureProfessor LectureProfessor[]

  @@map("lecture")
}

model LectureProfessor {
  lectureId   Int       @map("lecture_id")
  lecture     Lecture   @relation(fields: [lectureId], references: [id])
  professorId Int       @map("professor_id")
  professor   Professor @relation(fields: [professorId], references: [id])

  Record Record[]

  @@id([lectureId, professorId])
  @@map("lecture_professor")
}

model Record {
  id Int @id @default(autoincrement())

  difficulty  Int
  skill       Int
  helpfulness Int
  interest    Int
  load        Int
  generosity  Int

  review String

  recommendation Recommendation
  semester       Semester
  year           Int

  createdAt DateTime @default(now()) @map("created_at")

  userUuid         String           @map("user_uuid") @db.Uuid
  user             User             @relation(fields: [userUuid], references: [uuid])
  lectureId        Int              @map("lecture_id")
  professorId      Int              @map("professor_id")
  lectureProfessor LectureProfessor @relation(fields: [lectureId, professorId], references: [lectureId, professorId])

  RecordLike RecordLike[]

  @@map("record")
}

model RecordLike {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now()) @map("created_at")
  deletedAt DateTime? @map("deleted_at")

  userUuid         String           @map("user_uuid") @db.Uuid
  user             User             @relation(fields: [userUuid], references: [uuid])
  recordId Int @map("record_id")
  record Record @relation(fields: [recordId], references: [id])

  @@map("record_like")
}
