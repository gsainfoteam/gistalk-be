// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Semester {
  SPRING
  SUMMER
  FALL
  WINTER
  ALL
}

enum Recommendation {
  YES
  NO
  MAYBE
}

model User {
  uuid      String   @id @db.Uuid
  name      String
  consent   Boolean
  createdAt DateTime @default(now()) @map("created_at")

  TakingLectures  TakingLectures[]
  RecordProfessor RecordProfessor[]

  @@map("user")
}

model TakingLectures {
  userUuid  String @map("user_uuid") @db.Uuid
  lectureId Int    @map("lecture_id")
  sectionId Int    @unique @map("section_id")

  user    User           @relation(fields: [userUuid], references: [uuid])
  lecture Lecture        @relation(fields: [lectureId], references: [id])
  section LectureSection @relation(fields: [sectionId], references: [id])

  @@id([userUuid, lectureId, sectionId])
}

model Professor {
  id   Int    @id @default(autoincrement())
  name String

  LectureSectionProfessor LectureSectionProfessor[]

  @@map("professor")
}

model LectureCode {
  code String @id

  Lecture   Lecture @relation(fields: [lectureId], references: [id])
  lectureId Int     @map("lecture_id")

  @@map("lecture_code")
}

model Lecture {
  id Int @id @default(autoincrement()) @map("id")

  name String

  LectureCode     LectureCode[]
  TakingLectures  TakingLectures[]
  lectureSection  LectureSection[]
  RecordProfessor RecordProfessor[]

  @@map("lecture")
}

model LectureSection {
  id        Int @id @default(autoincrement())
  lectureId Int @map("lecture_id")

  lecture                 Lecture                  @relation(fields: [lectureId], references: [id])
  lectureSectionProfessor LectureSectionProfessor?
  takingLectures          TakingLectures?

  @@map("lecture_section")
}

model LectureSectionProfessor {
  sectionId   Int @unique @map("section_id")
  professorId Int @map("professor_id")

  section   LectureSection @relation(fields: [sectionId], references: [id])
  professor Professor      @relation(fields: [professorId], references: [id])

  RecordProfessor RecordProfessor[]

  @@id([sectionId, professorId])
  @@map("lecture_section_professor")
}

model Record {
  id Int @id @default(autoincrement())

  difficulty  Int
  skill       Int
  helpfulness Int
  interest    Int
  load        Int
  generosity  Int

  review String

  recommendation Recommendation
  semester       Semester
  year           Int

  createdAt DateTime @default(now()) @map("created_at")

  recordProfessor RecordProfessor[]

  @@map("record")
}

model RecordProfessor {
  recordId    Int    @map("record_id")
  userUuid    String @map("user_uuid") @db.Uuid
  lectureId   Int    @map("lecture_id")
  sectionId   Int    @unique @map("section_id")
  professorId Int    @map("professor_id")

  record                  Record                  @relation(fields: [recordId], references: [id])
  user                    User                    @relation(fields: [userUuid], references: [uuid])
  lecture                 Lecture                 @relation(fields: [lectureId], references: [id])
  lectureSectionProfessor LectureSectionProfessor @relation(fields: [sectionId, professorId], references: [sectionId, professorId])

  @@id([recordId, userUuid, lectureId, sectionId, professorId])
  @@map("record_professor")
}
